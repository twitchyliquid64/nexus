//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const USING = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const COLLATE = 57429
const BINARY = 57430
const UNDERSCORE_BINARY = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const TABLE = 57440
const INDEX = 57441
const VIEW = 57442
const TO = 57443
const IGNORE = 57444
const IF = 57445
const UNIQUE = 57446
const PRIMARY = 57447
const SHOW = 57448
const DESCRIBE = 57449
const EXPLAIN = 57450
const DATE = 57451
const ESCAPE = 57452
const REPAIR = 57453
const OPTIMIZE = 57454
const TRUNCATE = 57455
const MAXVALUE = 57456
const PARTITION = 57457
const REORGANIZE = 57458
const LESS = 57459
const THAN = 57460
const BIT = 57461
const TINYINT = 57462
const SMALLINT = 57463
const MEDIUMINT = 57464
const INT = 57465
const INTEGER = 57466
const BIGINT = 57467
const INTNUM = 57468
const REAL = 57469
const DOUBLE = 57470
const FLOAT_TYPE = 57471
const DECIMAL = 57472
const NUMERIC = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const NAMES = 57505
const CHARSET = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 264,
	78, 567,
	107, 567,
	-2, 39,
	-1, 266,
	78, 589,
	107, 589,
	-2, 41,
	-1, 271,
	107, 468,
	-2, 464,
	-1, 272,
	107, 469,
	-2, 465,
	-1, 549,
	5, 22,
	-2, 415,
	-1, 584,
	107, 471,
	-2, 467,
	-1, 742,
	5, 23,
	-2, 292,
	-1, 834,
	5, 23,
	-2, 416,
	-1, 908,
	5, 22,
	-2, 418,
	-1, 979,
	5, 23,
	-2, 419,
}

const yyPrivate = 57344

const yyLast = 7652

var yyAct = [...]int{

	332, 38, 988, 508, 292, 850, 725, 305, 263, 623,
	237, 587, 915, 331, 726, 610, 443, 682, 583, 885,
	381, 689, 804, 692, 586, 382, 3, 796, 659, 722,
	706, 596, 303, 272, 294, 766, 619, 354, 734, 38,
	231, 360, 274, 385, 370, 267, 575, 242, 252, 44,
	43, 246, 257, 1016, 1007, 1013, 639, 1002, 1011, 63,
	48, 268, 1006, 135, 236, 141, 135, 1001, 898, 946,
	637, 398, 251, 278, 965, 232, 233, 234, 235, 762,
	253, 50, 51, 52, 53, 135, 135, 603, 855, 856,
	857, 135, 923, 971, 611, 941, 643, 858, 939, 1010,
	1008, 989, 786, 140, 285, 636, 991, 474, 473, 483,
	484, 476, 477, 478, 479, 480, 481, 482, 475, 284,
	280, 485, 125, 126, 126, 451, 694, 571, 573, 300,
	128, 129, 130, 446, 953, 745, 744, 767, 743, 276,
	886, 281, 963, 783, 137, 127, 460, 520, 931, 785,
	598, 497, 498, 633, 638, 631, 837, 598, 808, 135,
	749, 135, 888, 507, 402, 135, 445, 289, 485, 475,
	864, 135, 485, 463, 641, 644, 461, 756, 401, 291,
	462, 461, 900, 890, 275, 894, 666, 889, 448, 887,
	329, 707, 463, 820, 892, 611, 307, 463, 635, 572,
	664, 665, 663, 891, 604, 707, 600, 691, 893, 895,
	760, 601, 634, 984, 859, 362, 61, 927, 992, 1000,
	865, 474, 473, 483, 484, 476, 477, 478, 479, 480,
	481, 482, 475, 995, 640, 485, 964, 962, 784, 597,
	782, 926, 775, 38, 269, 642, 597, 41, 256, 774,
	287, 595, 594, 863, 763, 535, 536, 662, 383, 797,
	476, 477, 478, 479, 480, 481, 482, 475, 357, 852,
	485, 478, 479, 480, 481, 482, 475, 974, 444, 485,
	925, 462, 461, 444, 135, 773, 293, 814, 902, 813,
	356, 135, 135, 135, 757, 683, 63, 684, 463, 450,
	462, 461, 494, 496, 358, 462, 461, 685, 456, 815,
	442, 63, 286, 135, 275, 135, 63, 463, 135, 997,
	293, 135, 463, 135, 652, 654, 655, 967, 465, 653,
	506, 957, 293, 510, 511, 512, 513, 514, 515, 516,
	966, 519, 521, 521, 521, 521, 521, 521, 521, 521,
	529, 530, 531, 532, 954, 955, 462, 461, 789, 790,
	791, 458, 538, 464, 550, 297, 355, 537, 257, 257,
	257, 257, 257, 463, 268, 552, 920, 919, 860, 462,
	461, 802, 293, 697, 383, 723, 567, 568, 399, 549,
	576, 257, 399, 63, 870, 869, 463, 832, 135, 867,
	866, 135, 135, 135, 135, 135, 392, 268, 367, 569,
	539, 577, 19, 135, 836, 293, 553, 135, 868, 556,
	135, 697, 293, 565, 135, 135, 466, 367, 293, 395,
	574, 367, 612, 613, 614, 579, 802, 63, 499, 500,
	501, 502, 503, 504, 505, 580, 393, 591, 391, 554,
	555, 625, 557, 397, 256, 750, 444, 41, 366, 509,
	320, 319, 322, 323, 324, 325, 518, 533, 397, 321,
	326, 41, 647, 397, 584, 621, 622, 404, 403, 605,
	135, 367, 660, 624, 243, 135, 840, 45, 135, 63,
	522, 523, 524, 525, 526, 527, 528, 38, 829, 495,
	483, 484, 476, 477, 478, 479, 480, 481, 482, 475,
	753, 510, 485, 698, 473, 483, 484, 476, 477, 478,
	479, 480, 481, 482, 475, 802, 709, 485, 581, 41,
	686, 687, 576, 735, 736, 124, 569, 620, 19, 63,
	802, 372, 375, 376, 377, 373, 615, 374, 378, 728,
	541, 38, 711, 63, 55, 268, 724, 269, 704, 627,
	854, 547, 727, 548, 256, 256, 256, 256, 256, 582,
	588, 714, 715, 399, 742, 776, 729, 738, 723, 584,
	256, 545, 454, 41, 63, 741, 250, 256, 649, 650,
	269, 656, 657, 397, 397, 739, 17, 658, 751, 732,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 740, 606, 607, 608, 609,
	63, 562, 764, 765, 748, 746, 563, 755, 19, 444,
	560, 616, 617, 618, 559, 561, 564, 509, 376, 377,
	701, 702, 558, 241, 1009, 778, 397, 444, 769, 770,
	771, 247, 248, 907, 1005, 788, 648, 361, 1004, 720,
	355, 63, 63, 787, 719, 661, 295, 768, 400, 759,
	359, 779, 986, 41, 696, 929, 985, 660, 296, 905,
	63, 754, 830, 629, 453, 380, 244, 245, 361, 238,
	799, 718, 792, 977, 800, 239, 688, 809, 397, 717,
	45, 976, 949, 747, 811, 812, 576, 950, 816, 924,
	708, 459, 47, 822, 49, 823, 824, 825, 826, 699,
	700, 390, 42, 703, 1, 632, 987, 849, 63, 593,
	585, 273, 54, 833, 834, 835, 819, 710, 269, 712,
	713, 731, 592, 772, 842, 843, 844, 961, 922, 599,
	135, 761, 721, 588, 831, 602, 853, 845, 983, 372,
	375, 376, 377, 373, 848, 374, 378, 758, 407, 735,
	736, 408, 406, 410, 409, 847, 405, 397, 138, 379,
	384, 394, 838, 63, 63, 803, 63, 63, 626, 56,
	781, 780, 630, 279, 793, 794, 795, 493, 716, 262,
	861, 862, 913, 730, 534, 353, 879, 975, 948, 818,
	135, 517, 705, 306, 135, 651, 318, 315, 777, 397,
	63, 875, 873, 317, 810, 316, 880, 883, 881, 540,
	257, 884, 896, 728, 821, 897, 909, 397, 546, 63,
	467, 304, 298, 570, 255, 363, 727, 906, 371, 912,
	904, 369, 368, 260, 737, 509, 917, 918, 733, 751,
	661, 908, 839, 135, 254, 841, 828, 899, 945, 990,
	63, 63, 444, 544, 63, 903, 63, 63, 63, 20,
	584, 63, 46, 249, 16, 806, 15, 14, 928, 932,
	933, 13, 24, 12, 11, 10, 9, 8, 801, 944,
	937, 942, 943, 7, 6, 63, 5, 4, 728, 240,
	38, 18, 817, 2, 951, 330, 846, 588, 0, 588,
	956, 727, 958, 959, 0, 0, 960, 877, 878, 0,
	968, 258, 0, 0, 0, 952, 0, 0, 0, 0,
	397, 397, 0, 397, 851, 133, 0, 901, 230, 0,
	973, 970, 0, 0, 63, 0, 0, 979, 268, 978,
	0, 132, 0, 0, 0, 63, 0, 133, 133, 270,
	0, 0, 0, 133, 0, 696, 0, 874, 0, 0,
	0, 994, 0, 0, 261, 0, 0, 63, 63, 277,
	0, 63, 996, 0, 0, 999, 806, 0, 0, 397,
	1003, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 1012, 0, 0, 588, 0, 0, 0, 0, 1017,
	1018, 0, 0, 63, 0, 0, 256, 910, 911, 947,
	0, 914, 0, 916, 916, 916, 0, 0, 397, 293,
	0, 133, 0, 133, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 133, 0, 0, 921, 282, 0, 283,
	0, 0, 397, 288, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 972, 474, 473, 483, 484, 476,
	477, 478, 479, 480, 481, 482, 475, 0, 0, 485,
	0, 934, 935, 0, 936, 0, 0, 938, 846, 940,
	0, 0, 0, 993, 509, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 19, 39, 21, 22,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 23,
	0, 269, 1014, 0, 980, 981, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
	0, 41, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 133, 387, 133, 0, 0, 0, 0,
	998, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 0, 0, 133, 0, 133, 0, 0,
	133, 0, 0, 133, 0, 457, 0, 0, 0, 413,
	0, 447, 0, 449, 0, 0, 452, 0, 0, 455,
	25, 26, 28, 27, 30, 0, 0, 0, 0, 0,
	0, 425, 0, 31, 34, 35, 0, 0, 36, 37,
	29, 430, 431, 432, 433, 434, 435, 436, 0, 437,
	438, 439, 440, 441, 426, 427, 428, 429, 411, 412,
	0, 0, 414, 0, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 0, 0, 0, 0, 0,
	133, 0, 270, 133, 133, 133, 133, 133, 0, 0,
	0, 0, 0, 0, 0, 566, 551, 0, 0, 133,
	0, 40, 387, 0, 0, 0, 133, 133, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 469, 457, 472,
	0, 0, 0, 578, 0, 486, 487, 488, 489, 490,
	491, 492, 0, 470, 471, 468, 474, 473, 483, 484,
	476, 477, 478, 479, 480, 481, 482, 475, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 133, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 645, 0, 0, 646, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 457, 0, 0, 0, 695, 695, 62,
	0, 695, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 695, 695, 695, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	695, 0, 0, 270, 474, 473, 483, 484, 476, 477,
	478, 479, 480, 481, 482, 475, 0, 0, 485, 474,
	473, 483, 484, 476, 477, 478, 479, 480, 481, 482,
	475, 0, 136, 485, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 93, 71, 0, 0, 798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 84, 121, 100, 79, 115, 474,
	473, 483, 484, 476, 477, 478, 479, 480, 481, 482,
	475, 0, 0, 485, 474, 473, 483, 484, 476, 477,
	478, 479, 480, 481, 482, 475, 695, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 457, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 209, 182,
	221, 160, 174, 229, 175, 176, 203, 148, 190, 96,
	172, 0, 163, 143, 169, 144, 161, 184, 77, 187,
	159, 211, 193, 227, 85, 198, 0, 104, 92, 0,
	0, 186, 213, 188, 208, 181, 204, 153, 197, 222,
	173, 201, 223, 0, 0, 0, 62, 0, 589, 590,
	0, 0, 0, 0, 0, 72, 0, 200, 218, 171,
	202, 142, 199, 0, 146, 149, 228, 216, 166, 167,
	752, 0, 0, 0, 0, 0, 0, 185, 189, 205,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 196, 0, 0, 0, 150, 147, 0, 183, 0,
	0, 0, 152, 0, 165, 206, 270, 214, 180, 136,
	217, 178, 177, 220, 99, 212, 162, 170, 73, 168,
	103, 97, 0, 195, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 145, 0, 105, 114, 123, 158, 215, 118,
	119, 120, 93, 71, 156, 157, 154, 155, 191, 192,
	224, 225, 226, 207, 151, 0, 0, 210, 194, 64,
	0, 84, 121, 100, 79, 115, 219, 209, 182, 221,
	160, 174, 229, 175, 176, 203, 148, 190, 96, 172,
	0, 163, 143, 169, 144, 161, 184, 77, 187, 159,
	211, 193, 227, 85, 198, 0, 104, 92, 0, 0,
	186, 213, 188, 208, 181, 204, 153, 197, 222, 173,
	201, 223, 0, 0, 0, 62, 0, 589, 590, 0,
	0, 0, 0, 0, 72, 0, 200, 218, 171, 202,
	142, 199, 0, 146, 149, 228, 216, 166, 167, 0,
	0, 0, 0, 0, 0, 0, 185, 189, 205, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	196, 0, 0, 0, 150, 147, 0, 183, 0, 0,
	0, 152, 0, 165, 206, 0, 214, 180, 136, 217,
	178, 177, 220, 99, 212, 162, 170, 73, 168, 103,
	97, 0, 195, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 145, 0, 105, 114, 123, 158, 215, 118, 119,
	120, 93, 71, 156, 157, 154, 155, 191, 192, 224,
	225, 226, 207, 151, 0, 0, 210, 194, 64, 0,
	84, 121, 100, 79, 115, 219, 209, 182, 221, 160,
	174, 229, 175, 176, 203, 148, 190, 96, 172, 0,
	163, 143, 169, 144, 161, 184, 77, 187, 159, 211,
	193, 227, 85, 198, 0, 104, 92, 0, 0, 186,
	213, 188, 208, 181, 204, 153, 197, 222, 173, 201,
	223, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 200, 218, 171, 202, 142,
	199, 0, 146, 149, 228, 216, 166, 167, 0, 0,
	0, 0, 0, 0, 0, 185, 189, 205, 179, 0,
	0, 0, 0, 0, 0, 969, 0, 164, 0, 196,
	0, 0, 0, 150, 147, 0, 183, 0, 0, 0,
	152, 0, 165, 206, 0, 214, 180, 136, 217, 178,
	177, 220, 99, 212, 162, 170, 73, 168, 103, 97,
	0, 195, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	145, 0, 105, 114, 123, 158, 215, 118, 119, 120,
	93, 71, 156, 157, 154, 155, 191, 192, 224, 225,
	226, 207, 151, 0, 0, 210, 194, 64, 0, 84,
	121, 100, 79, 115, 219, 209, 182, 221, 160, 174,
	229, 175, 176, 203, 148, 190, 96, 172, 0, 163,
	143, 169, 144, 161, 184, 77, 187, 159, 211, 193,
	227, 85, 198, 0, 104, 92, 0, 0, 186, 213,
	188, 208, 181, 204, 153, 197, 222, 173, 201, 223,
	41, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 200, 218, 171, 202, 142, 199,
	0, 146, 149, 228, 216, 166, 167, 0, 0, 0,
	0, 0, 0, 0, 185, 189, 205, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 196, 0,
	0, 0, 150, 147, 0, 183, 0, 0, 0, 152,
	0, 165, 206, 0, 214, 180, 136, 217, 178, 177,
	220, 99, 212, 162, 170, 73, 168, 103, 97, 0,
	195, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 145,
	0, 105, 114, 123, 158, 215, 118, 119, 120, 93,
	71, 156, 157, 154, 155, 191, 192, 224, 225, 226,
	207, 151, 0, 0, 210, 194, 64, 0, 84, 121,
	100, 79, 115, 219, 209, 182, 221, 160, 174, 229,
	175, 176, 203, 148, 190, 96, 172, 0, 163, 143,
	169, 144, 161, 184, 77, 187, 159, 211, 193, 227,
	85, 198, 0, 104, 92, 0, 0, 186, 213, 188,
	208, 181, 204, 153, 197, 222, 173, 201, 223, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 200, 218, 171, 202, 142, 199, 0,
	146, 149, 228, 216, 166, 167, 0, 0, 0, 0,
	0, 0, 0, 185, 189, 205, 179, 0, 0, 0,
	0, 0, 0, 882, 0, 164, 0, 196, 0, 0,
	0, 150, 147, 0, 183, 0, 0, 0, 152, 0,
	165, 206, 0, 214, 180, 136, 217, 178, 177, 220,
	99, 212, 162, 170, 73, 168, 103, 97, 0, 195,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 145, 0,
	105, 114, 123, 158, 215, 118, 119, 120, 93, 71,
	156, 157, 154, 155, 191, 192, 224, 225, 226, 207,
	151, 0, 0, 210, 194, 64, 0, 84, 121, 100,
	79, 115, 219, 209, 182, 221, 160, 174, 229, 175,
	176, 203, 148, 190, 96, 172, 0, 163, 143, 169,
	144, 161, 184, 77, 187, 159, 211, 193, 227, 85,
	198, 0, 104, 92, 0, 0, 186, 213, 188, 208,
	181, 204, 153, 197, 222, 173, 201, 223, 0, 0,
	0, 62, 0, 396, 0, 0, 0, 0, 0, 0,
	72, 0, 200, 218, 171, 202, 142, 199, 0, 146,
	149, 228, 216, 166, 167, 0, 0, 0, 0, 0,
	0, 0, 185, 189, 205, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 196, 0, 0, 0,
	150, 147, 0, 183, 0, 0, 0, 152, 0, 165,
	206, 0, 214, 180, 136, 217, 178, 177, 220, 99,
	212, 162, 170, 73, 168, 103, 97, 0, 195, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 145, 0, 105,
	114, 123, 158, 215, 118, 119, 120, 93, 71, 156,
	157, 154, 155, 191, 192, 224, 225, 226, 207, 151,
	0, 0, 210, 194, 64, 0, 84, 121, 100, 79,
	115, 219, 209, 182, 221, 160, 174, 229, 175, 176,
	203, 148, 190, 96, 172, 0, 163, 143, 169, 144,
	161, 184, 77, 187, 159, 211, 193, 227, 85, 198,
	0, 104, 92, 0, 0, 186, 213, 188, 208, 181,
	204, 153, 197, 222, 173, 201, 223, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 200, 218, 171, 202, 142, 199, 0, 146, 149,
	228, 216, 166, 167, 0, 0, 0, 0, 0, 0,
	0, 185, 189, 205, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 196, 0, 0, 0, 150,
	147, 0, 183, 0, 0, 0, 152, 0, 165, 206,
	0, 214, 180, 136, 217, 178, 177, 220, 99, 212,
	162, 170, 73, 168, 103, 97, 0, 195, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 145, 0, 105, 114,
	123, 158, 215, 118, 119, 120, 93, 71, 156, 157,
	154, 155, 191, 192, 224, 225, 226, 207, 151, 0,
	0, 210, 194, 64, 0, 84, 121, 100, 79, 115,
	219, 209, 182, 221, 160, 174, 229, 175, 176, 203,
	148, 190, 96, 172, 0, 163, 143, 169, 144, 161,
	184, 77, 187, 159, 211, 193, 227, 85, 198, 0,
	104, 92, 0, 0, 186, 213, 188, 208, 181, 204,
	153, 197, 222, 173, 201, 223, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	200, 218, 171, 202, 142, 199, 0, 146, 149, 228,
	216, 166, 167, 0, 0, 0, 0, 0, 0, 0,
	185, 189, 205, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 196, 0, 0, 0, 150, 147,
	0, 183, 0, 0, 0, 152, 0, 165, 206, 0,
	214, 180, 136, 217, 178, 177, 220, 99, 212, 162,
	170, 73, 168, 103, 97, 0, 195, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 145, 0, 105, 114, 123,
	158, 215, 118, 119, 120, 93, 71, 156, 157, 154,
	155, 191, 192, 224, 225, 226, 207, 151, 0, 0,
	210, 194, 64, 0, 84, 121, 100, 79, 115, 219,
	209, 182, 221, 160, 174, 229, 175, 176, 203, 148,
	190, 96, 172, 0, 163, 143, 169, 144, 161, 184,
	77, 187, 159, 211, 193, 227, 85, 198, 0, 104,
	92, 0, 0, 186, 213, 188, 208, 181, 204, 153,
	197, 222, 173, 201, 223, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 200,
	218, 171, 202, 142, 199, 0, 146, 149, 228, 216,
	166, 167, 0, 0, 0, 0, 0, 0, 0, 185,
	189, 205, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 196, 0, 0, 0, 150, 147, 0,
	183, 0, 0, 0, 152, 0, 165, 206, 0, 214,
	180, 136, 217, 178, 177, 220, 99, 212, 162, 170,
	73, 168, 103, 97, 0, 195, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 145, 0, 105, 114, 123, 158,
	215, 118, 119, 120, 93, 71, 156, 157, 154, 155,
	191, 192, 224, 225, 226, 207, 151, 0, 0, 210,
	194, 64, 0, 84, 121, 100, 79, 115, 219, 209,
	182, 221, 160, 174, 229, 175, 176, 203, 148, 190,
	96, 172, 0, 163, 143, 169, 144, 161, 184, 77,
	187, 159, 211, 193, 227, 85, 198, 0, 104, 92,
	0, 0, 186, 213, 188, 208, 181, 204, 153, 197,
	222, 173, 201, 223, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 200, 218,
	171, 202, 142, 199, 0, 146, 149, 228, 216, 166,
	167, 0, 0, 0, 0, 0, 0, 0, 185, 189,
	205, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 196, 0, 0, 0, 150, 147, 0, 183,
	0, 0, 0, 152, 0, 165, 206, 0, 214, 180,
	136, 217, 178, 177, 220, 99, 212, 162, 170, 73,
	168, 103, 97, 0, 195, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 145, 0, 105, 114, 123, 158, 215,
	118, 119, 120, 93, 71, 156, 157, 154, 155, 191,
	192, 224, 225, 226, 207, 151, 0, 0, 210, 194,
	64, 0, 84, 121, 100, 79, 115, 96, 0, 0,
	690, 0, 302, 0, 0, 0, 77, 0, 301, 0,
	0, 340, 85, 0, 0, 104, 92, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 271, 320, 319, 322, 323, 324,
	325, 0, 0, 72, 321, 326, 327, 328, 0, 0,
	299, 313, 0, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 693, 0, 0, 0, 351,
	0, 312, 0, 0, 308, 309, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	349, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 0, 0, 118, 119, 120,
	93, 71, 341, 350, 347, 348, 345, 346, 344, 343,
	342, 352, 335, 336, 338, 0, 337, 64, 0, 84,
	121, 100, 79, 115, 96, 0, 0, 0, 0, 302,
	0, 0, 0, 77, 0, 301, 0, 0, 340, 85,
	0, 0, 104, 92, 0, 0, 0, 0, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 271, 320, 319, 322, 323, 324, 325, 0, 0,
	72, 321, 326, 327, 328, 0, 0, 299, 313, 0,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 693, 0, 0, 0, 351, 0, 312, 0,
	0, 308, 309, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 349, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 0, 0, 118, 119, 120, 93, 71, 341,
	350, 347, 348, 345, 346, 344, 343, 342, 352, 335,
	336, 338, 0, 337, 64, 0, 84, 121, 100, 79,
	115, 96, 0, 0, 0, 0, 302, 0, 0, 0,
	77, 0, 301, 0, 0, 340, 85, 0, 0, 104,
	92, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 293, 271, 320,
	319, 322, 323, 324, 325, 0, 0, 72, 321, 326,
	327, 328, 0, 0, 299, 313, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 0,
	0, 0, 0, 351, 0, 312, 0, 0, 308, 309,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 349, 0, 99, 0, 0, 0,
	73, 0, 103, 97, 0, 0, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 0, 0, 105, 114, 123, 0,
	0, 118, 119, 120, 93, 71, 341, 350, 347, 348,
	345, 346, 344, 343, 342, 352, 335, 336, 338, 19,
	337, 64, 0, 84, 121, 100, 79, 115, 0, 0,
	96, 0, 0, 0, 0, 302, 0, 0, 0, 77,
	0, 301, 0, 0, 340, 85, 0, 0, 104, 92,
	0, 0, 0, 0, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 271, 320, 319,
	322, 323, 324, 325, 0, 0, 72, 321, 326, 327,
	328, 0, 0, 299, 313, 0, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 0, 0,
	0, 0, 351, 0, 312, 0, 0, 308, 309, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 349, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 0, 0,
	118, 119, 120, 93, 71, 341, 350, 347, 348, 345,
	346, 344, 343, 342, 352, 335, 336, 338, 0, 337,
	64, 0, 84, 121, 100, 79, 115, 96, 0, 0,
	0, 0, 302, 0, 0, 0, 77, 0, 301, 0,
	0, 340, 85, 0, 0, 104, 92, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 271, 320, 319, 322, 323, 324,
	325, 0, 0, 72, 321, 326, 327, 328, 0, 0,
	299, 313, 0, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 351,
	0, 312, 0, 0, 308, 309, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	349, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 0, 0, 118, 119, 120,
	93, 71, 341, 350, 347, 348, 345, 346, 344, 343,
	342, 352, 335, 336, 338, 96, 337, 64, 0, 84,
	121, 100, 79, 115, 77, 0, 0, 0, 0, 340,
	85, 0, 0, 104, 92, 0, 0, 0, 0, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 271, 320, 319, 322, 323, 324, 325, 0,
	0, 72, 321, 326, 327, 328, 0, 0, 0, 313,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 0, 0, 0, 0, 351, 0, 312,
	0, 0, 308, 309, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 349, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 1015,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 93, 71,
	341, 350, 347, 348, 345, 346, 344, 343, 342, 352,
	335, 336, 338, 96, 337, 64, 0, 84, 121, 100,
	79, 115, 77, 0, 0, 0, 0, 340, 85, 0,
	0, 104, 92, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	271, 320, 319, 322, 323, 324, 325, 0, 0, 72,
	321, 326, 327, 328, 0, 0, 0, 313, 0, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 0, 0, 0, 0, 351, 0, 312, 0, 0,
	308, 309, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 349, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 0, 0, 118, 119, 120, 93, 71, 341, 350,
	347, 348, 345, 346, 344, 343, 342, 352, 335, 336,
	338, 0, 337, 64, 0, 84, 121, 100, 79, 115,
	96, 0, 0, 0, 805, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 85, 0, 0, 104, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 807,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 462, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 96, 0,
	118, 119, 120, 93, 71, 0, 0, 77, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	64, 0, 84, 121, 100, 79, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 57, 0,
	0, 0, 60, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 0, 0, 19, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 64, 0,
	84, 121, 100, 79, 115, 77, 0, 0, 0, 0,
	0, 85, 0, 0, 104, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 0, 0, 118, 119, 120, 93,
	71, 0, 0, 19, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 64, 0, 84, 121,
	100, 79, 115, 77, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 542, 0, 0, 543, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 93, 71, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 386, 0,
	0, 0, 64, 77, 84, 121, 100, 79, 115, 85,
	0, 0, 104, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 388, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 41, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	96, 0, 118, 119, 120, 93, 71, 0, 0, 77,
	0, 0, 0, 0, 0, 85, 0, 0, 104, 92,
	0, 0, 64, 0, 84, 121, 100, 79, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 807,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 96, 0,
	118, 119, 120, 93, 71, 0, 0, 77, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	64, 0, 84, 121, 100, 79, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 388, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 364, 77, 0, 0, 0, 0,
	0, 85, 0, 0, 104, 92, 0, 0, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 259, 0,
	0, 105, 114, 123, 0, 96, 118, 119, 120, 93,
	71, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	85, 0, 0, 104, 92, 0, 64, 0, 84, 121,
	100, 79, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 96, 0, 118, 119, 120, 93, 71,
	0, 0, 77, 0, 0, 0, 0, 0, 85, 0,
	0, 104, 92, 0, 0, 64, 0, 84, 121, 100,
	79, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 136, 0, 0, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 96, 0, 118, 119, 120, 93, 71, 0, 0,
	77, 0, 0, 0, 0, 0, 85, 0, 0, 104,
	92, 0, 0, 64, 0, 84, 121, 100, 79, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 99, 0, 0, 0,
	73, 0, 103, 97, 0, 0, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 0, 0, 105, 114, 123, 96,
	0, 118, 119, 120, 93, 71, 0, 0, 77, 0,
	0, 0, 0, 0, 85, 0, 0, 104, 92, 0,
	0, 64, 0, 84, 121, 100, 79, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 96, 0, 118,
	119, 120, 93, 71, 0, 0, 77, 0, 0, 0,
	0, 0, 85, 0, 0, 104, 92, 0, 0, 64,
	0, 84, 121, 100, 79, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 96, 0, 118, 119, 120,
	93, 71, 0, 0, 77, 0, 0, 0, 0, 0,
	85, 0, 0, 104, 92, 0, 0, 64, 0, 84,
	121, 100, 79, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 265, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 266, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 84, 121, 100,
	79, 115,
}
var yyPact = [...]int{

	1110, -1000, -154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 686, 707, -1000,
	-1000, -1000, -1000, -1000, 503, 5181, 5, 30, 15, 6816,
	29, 3543, 7290, -1000, -1000, -1000, -1000, -1000, 406, -1000,
	-1000, -1000, -1000, -1000, 673, 680, 478, 667, 614, -1000,
	4, 6025, 6658, 7448, -1000, 260, 23, 7290, -118, 0,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 26, 7290, -1000, 7290, -16, 258,
	-16, 7290, -1000, 60, -1000, -1000, -1000, 7290, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 233, 648, 4480, 4480,
	686, -1000, 406, -1000, -1000, -1000, 637, -1000, -1000, 153,
	6499, 429, 502, -1000, -1000, -1000, 664, 5537, 5867, 7290,
	396, -1000, 2747, 340, -1000, 639, -1000, -1000, 100, -1000,
	57, -1000, -1000, 425, -1000, 1105, 256, 2349, 16, 7290,
	118, 7290, 2349, 7, 7290, 662, 533, 7290, -1000, 3344,
	-1000, -1000, -1000, -1000, -1000, 703, 58, 311, -1000, 4480,
	1247, 420, 420, -1000, -1000, 43, -1000, -1000, 4836, 4836,
	4836, 4836, 4836, 4836, 4836, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 420,
	56, -1000, 4293, 420, 420, 420, 420, 420, 420, 4480,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 415, -1000, 232, 673, 233, 614, 5695,
	541, -1000, -1000, 532, 7290, -1000, 7132, 6025, 6025, 6025,
	6025, 6025, -1000, 603, 595, -1000, 591, 582, 597, 7290,
	-1000, 375, 233, 5537, 80, -1000, 6341, -1000, -1000, 695,
	6025, 7290, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7132,
	-1000, 4480, 3145, 1951, 130, 141, -86, -1000, -1000, 428,
	-1000, 428, 428, 428, 428, -62, -62, -62, -62, -1000,
	-1000, -1000, -1000, -1000, 495, -1000, 428, 428, 428, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 486, 486, 486,
	432, 432, 509, -1000, -1000, -1000, 7290, -1000, 661, 42,
	-1000, 7290, -1000, -1000, 7290, 2349, -1000, -1000, -1000, -1000,
	621, 4480, 4480, 259, 4480, 4480, 88, 4836, 196, 114,
	4836, 4836, 4836, 4836, 4836, 4836, 4836, 4836, 4836, 4836,
	4836, 4836, 4836, 4836, 4836, 241, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 253, -1000, 406, 405, 405, 65,
	65, 65, 65, 65, 65, 1375, 3730, 3145, 369, 112,
	4293, 3917, 3917, 4480, 4480, 3917, 668, 131, 112, 6974,
	-1000, 233, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3917,
	3917, 3917, 3917, 4480, -1000, -1000, -1000, 648, -1000, 668,
	681, -1000, 633, 628, 3917, -1000, 529, 7132, 420, -1000,
	5359, -1000, 521, 502, 484, 528, 720, -1000, -1000, -1000,
	-1000, 576, -1000, 546, -1000, -1000, -1000, -1000, -1000, 233,
	-1000, 22, 20, 19, -1000, 686, 4480, 379, -1000, -1000,
	-1000, 112, -1000, 53, -1000, 403, 1752, -1000, -1000, -1000,
	-1000, -1000, -1000, 459, 654, 123, 240, -1000, -1000, 641,
	-1000, 145, -95, -1000, -1000, 197, -62, -62, -1000, -1000,
	34, 638, 34, 34, 34, 229, -1000, -1000, -1000, -1000,
	192, -1000, -1000, -1000, 185, -1000, 526, 6974, 2349, -1000,
	-1000, 122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -30, -1000, 2349, -1000, 619, 88,
	107, -1000, -1000, 293, -1000, -1000, 112, 112, 1505, -1000,
	-1000, -1000, -1000, 196, 4836, 4836, 4836, 132, 1505, 1490,
	409, 424, 65, 176, 176, 69, 69, 69, 69, 69,
	167, 167, -1000, -1000, -1000, 233, -1000, -1000, -1000, 233,
	3917, 384, -1000, -1000, 5023, 51, 420, 4480, -1000, 329,
	329, 237, 288, 329, 3917, 117, -1000, 4480, 233, -1000,
	329, 233, 329, 329, -1000, -1000, 7290, -1000, -1000, -1000,
	-1000, 488, -1000, 656, 336, 345, -1000, -1000, 4104, 233,
	362, 49, 686, -1000, -1000, 4480, 435, -1000, 4480, -1000,
	-1000, -1000, -1000, 420, 420, 420, 673, 112, -1000, 2946,
	1951, -1000, 1951, 6974, -1000, 215, -1000, -1000, 511, 32,
	-1000, -1000, -1000, 325, 34, 34, -1000, 199, 116, -1000,
	-1000, -1000, 347, -1000, 366, 342, 7290, -1000, -1000, -1000,
	7290, -1000, -1000, -1000, -1000, -1000, 6974, -1000, -1000, -1000,
	-1000, -1000, -1000, 132, 1505, 1390, -1000, 4836, 4836, -1000,
	-1000, 329, 3917, -1000, -1000, 6183, -1000, -1000, 2548, 3917,
	112, -1000, -1000, 36, 241, 36, -129, 473, 105, -1000,
	4480, 213, -1000, -1000, -1000, -1000, -1000, -1000, 695, 6025,
	652, -1000, 420, -1000, -1000, 622, 6974, 6974, 673, 112,
	6974, 112, 6974, 6974, 6974, -1000, -1000, 1752, -1000, 324,
	-1000, 428, -1000, -78, 701, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 224, 184, -1000,
	160, 2349, -1000, -1000, 650, -1000, 4836, 1505, 1505, -1000,
	-1000, -1000, -1000, 41, 233, 233, 428, 428, -1000, 428,
	432, -1000, 428, -43, 428, -46, 233, 233, 420, -126,
	-1000, 112, 4480, 690, 356, 699, -1000, 420, -1000, 406,
	27, -1000, -1000, 302, -1000, 279, -1000, 279, 279, -1000,
	6974, -1000, 115, -1000, -108, -1000, 287, 274, -1000, 420,
	1505, 2150, -1000, -1000, -1000, 39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4836, 233, 221, 112, 688, 678,
	7132, 345, 233, 6974, 6974, -1000, -1000, 6974, -1000, -1000,
	-1000, 150, 649, -1000, 645, -1000, -1000, -1000, -31, -1000,
	-1000, -1000, 18, -1000, -1000, -1000, 4480, 4480, 340, -1000,
	-1000, -1000, -1000, -1000, 177, -1000, -1000, 267, -1000, 6974,
	233, 21, -144, 112, 331, -1000, -1000, -31, 627, -1000,
	618, -137, -148, -1000, -34, -1000, 608, -1000, -36, -142,
	420, -146, 4658, -149, 986, 233, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 913, 25, 596, 911, 909, 907, 906, 904, 903,
	897, 896, 895, 894, 893, 892, 891, 887, 886, 884,
	60, 883, 882, 879, 41, 873, 51, 869, 868, 27,
	207, 21, 23, 126, 866, 20, 48, 80, 864, 38,
	858, 854, 853, 852, 44, 851, 848, 931, 845, 844,
	843, 12, 46, 842, 841, 840, 838, 32, 129, 829,
	825, 823, 817, 816, 815, 28, 3, 6, 13, 14,
	813, 196, 7, 812, 30, 811, 809, 808, 807, 49,
	805, 37, 804, 10, 34, 803, 802, 29, 8, 799,
	45, 798, 535, 797, 119, 793, 792, 791, 790, 789,
	788, 71, 33, 190, 166, 22, 785, 781, 915, 18,
	43, 780, 779, 40, 16, 17, 19, 778, 776, 774,
	773, 772, 771, 768, 204, 767, 758, 756, 15, 35,
	755, 751, 36, 9, 749, 748, 747, 743, 42, 742,
	31, 732, 731, 730, 24, 11, 729, 5, 727, 726,
	2, 725, 724, 722, 0, 4, 721, 714, 147,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 156, 156, 42, 42, 9, 9, 89,
	89, 89, 107, 107, 10, 10, 10, 10, 15, 141,
	142, 142, 142, 138, 118, 118, 118, 121, 121, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 122, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	137, 137, 124, 124, 132, 132, 133, 133, 133, 130,
	130, 131, 131, 134, 134, 134, 125, 125, 125, 125,
	125, 125, 127, 127, 135, 135, 128, 128, 128, 129,
	129, 136, 136, 136, 136, 136, 126, 126, 139, 146,
	146, 146, 146, 140, 140, 148, 148, 147, 143, 143,
	143, 144, 144, 144, 145, 145, 145, 11, 11, 11,
	11, 11, 151, 149, 149, 150, 150, 12, 13, 13,
	13, 14, 14, 16, 117, 117, 117, 17, 18, 18,
	19, 19, 19, 19, 19, 157, 20, 21, 21, 22,
	22, 22, 26, 26, 26, 24, 24, 25, 25, 31,
	31, 30, 30, 32, 32, 32, 32, 106, 106, 106,
	105, 105, 34, 34, 35, 35, 36, 36, 37, 37,
	37, 49, 86, 86, 38, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 112, 112, 111, 111, 111, 110,
	110, 43, 43, 43, 45, 44, 44, 44, 44, 46,
	46, 48, 48, 47, 47, 50, 50, 50, 50, 51,
	51, 52, 52, 33, 33, 33, 33, 33, 33, 33,
	93, 93, 54, 54, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 64, 64, 64, 64, 64, 64,
	55, 55, 55, 55, 55, 55, 55, 29, 29, 65,
	65, 65, 71, 66, 66, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 62, 62, 62, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 61, 61, 158, 158, 63, 63,
	63, 63, 27, 27, 27, 27, 27, 115, 115, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 75, 75, 28, 28, 73, 73, 74, 76,
	76, 72, 72, 72, 57, 57, 57, 57, 57, 57,
	57, 57, 59, 59, 59, 77, 77, 78, 78, 79,
	79, 80, 80, 81, 82, 82, 82, 83, 83, 83,
	83, 84, 84, 84, 56, 56, 56, 56, 56, 56,
	85, 85, 85, 85, 87, 87, 67, 67, 69, 69,
	68, 70, 88, 88, 90, 91, 91, 94, 94, 95,
	95, 92, 92, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 97, 97, 97, 98, 98, 99,
	99, 99, 100, 100, 103, 103, 104, 104, 108, 108,
	109, 109, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 154, 155, 113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -152, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 110, 111, 113, 112, 130,
	114, 123, 47, 24, 124, 125, 128, 129, -154, 7,
	191, 51, -153, 204, -79, 14, -22, 5, -20, -157,
	-20, -20, -20, -20, -141, 51, -99, 117, 68, 115,
	121, -103, 54, -102, 197, 142, 136, 163, 155, 153,
	156, 181, 63, 126, 151, 147, 145, 26, 168, 202,
	146, 140, 141, 167, 199, 32, 134, 166, 162, 165,
	139, 161, 36, 180, 158, 148, 17, 129, 132, 122,
	201, 144, 133, 128, 35, 172, 138, 159, 135, 149,
	150, 164, 137, 160, 173, 203, 157, 154, 177, 178,
	179, 200, 152, 174, -92, 117, 119, 115, 115, 116,
	117, 115, -47, -108, 54, -102, 117, 115, -117, 54,
	-101, -102, 69, 21, 23, 170, 72, 104, 15, 73,
	103, 192, 110, 45, 184, 185, 182, 183, 175, 28,
	9, 24, 124, 20, 97, 112, 76, 77, 127, 22,
	125, 67, 18, 48, 10, 12, 13, 120, 119, 88,
	116, 43, 7, 106, 25, 85, 39, 27, 41, 86,
	16, 186, 187, 30, 196, 131, 99, 46, 33, 70,
	65, 49, 68, 14, 44, 87, 113, 191, 42, 6,
	195, 29, 123, 40, 115, 176, 75, 118, 66, 5,
	121, 8, 47, 50, 188, 189, 190, 31, 74, 11,
	-108, -113, -113, -113, -113, -113, -2, -83, 16, 15,
	-5, -3, -154, 6, 19, 20, -26, 37, 38, -21,
	-92, -35, -36, -37, -38, -49, -71, -154, -47, 10,
	-42, -47, -89, -88, 181, 156, 180, -90, -72, -103,
	-108, 54, -102, -142, -138, 54, 116, -47, 191, -95,
	120, 115, -47, -47, -94, 120, 54, -94, -47, 107,
	-47, -113, -155, 53, -84, 18, 30, -33, -53, 70,
	-58, 28, 22, -57, -54, -72, -70, -71, 104, 105,
	93, 94, 101, 71, 106, -62, -60, -61, -63, 56,
	55, 64, 57, 58, 59, 60, 65, 66, 67, -103,
	-108, -68, -154, 41, 42, 192, 193, 196, 194, 73,
	31, 182, 190, 189, 188, 186, 187, 184, 185, 120,
	183, 99, 191, -80, -81, -33, -79, -2, -20, 33,
	-24, 20, 62, -48, 25, -47, 29, 52, -43, -45,
	-44, -46, 39, 43, 45, 40, 41, 42, 46, -112,
	21, -35, -2, -154, -111, -110, 21, -108, 56, -47,
	-156, 52, 10, 50, -107, -104, 56, -103, -101, 52,
	29, 78, 107, 53, 52, -118, -121, -123, -122, -119,
	-120, 153, 154, 104, 157, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 126, 149, 150, 151, 152,
	136, 137, 138, 139, 140, 141, 142, 144, 145, 146,
	147, 148, 54, -114, -154, -104, 117, -47, 70, -47,
	-114, 118, -47, 22, 49, -47, -109, -108, -101, 8,
	88, 69, 68, 85, 52, 17, -33, -55, 88, 70,
	86, 87, 72, 90, 89, 100, 93, 94, 95, 96,
	97, 98, 99, 91, 92, 103, 78, 79, 80, 81,
	82, 83, 84, -93, -154, -71, -154, 108, 109, -58,
	-58, -58, -58, -58, -58, -58, -154, 107, -66, -33,
	-154, -154, -154, -154, -154, -154, -154, -75, -33, -154,
	-158, -154, -158, -158, -158, -158, -158, -158, -158, -154,
	-154, -154, -154, 52, -82, 23, 24, -83, -155, -26,
	-59, -103, 57, 60, -25, 40, -56, 29, 31, -2,
	-154, -47, -88, -36, -37, -37, -36, -37, 39, 39,
	39, 44, 39, 44, 39, -44, -108, -155, -155, -2,
	-50, 47, 119, 48, -110, -52, 11, -35, -47, -113,
	-90, -33, -104, -109, -101, -143, -144, -145, -104, 56,
	57, -138, -139, -146, 122, 121, -140, 116, 27, -134,
	65, 70, -130, 173, -124, 51, -124, -124, -124, -124,
	-128, 156, -128, -128, -128, 51, -124, -124, -124, -132,
	51, -132, -132, -133, 51, -133, -100, 50, -47, 22,
	-96, 113, -151, 111, 170, 156, 63, 28, 112, 14,
	192, 132, 203, 54, 133, -47, -47, -114, 35, -33,
	-33, -64, 65, 70, 66, 67, -33, -33, -58, -65,
	-68, -71, 61, 88, 86, 87, 72, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -115, 54, 56, 54, -57, -57, -103, -31,
	20, -30, -32, 95, -33, -108, -104, 52, -155, -30,
	-30, -33, -33, -30, -24, -73, -74, 74, -103, -155,
	-30, -31, -30, -30, -81, -84, -91, 18, 10, 31,
	31, -30, -87, 49, -88, -67, -69, -68, -154, -2,
	-85, -103, -52, -40, -39, 49, 50, -41, 49, -39,
	39, 39, -155, 116, 116, 116, -79, -33, -52, 107,
	52, -145, 78, 51, 27, -140, 54, 54, -125, 28,
	65, -131, 174, 57, -128, -128, -129, 103, 29, -129,
	-129, -129, -137, 56, 57, 57, 49, -103, -114, -113,
	-97, -98, 118, 21, 116, 27, 132, -114, 36, 65,
	66, 67, -65, -58, -58, -58, -29, 127, 69, -155,
	-155, -30, 52, -106, -105, 21, -103, 56, 107, -154,
	-33, -155, -155, 52, 50, 21, -155, -30, -76, -74,
	76, -33, -155, -155, -155, -155, -155, -47, -34, 10,
	26, -87, 52, -155, -155, -155, 52, 107, -79, -33,
	51, -33, -154, -154, -154, -83, -104, -144, -145, -148,
	-147, -103, 54, -127, 49, 56, 57, 58, 65, 182,
	53, -129, -129, 54, 54, 104, 53, 52, 52, 53,
	52, -47, -47, -113, -103, -29, 69, -58, -58, -155,
	-32, -105, 95, -109, -31, -116, 104, 153, 126, 151,
	147, 167, 158, 172, 149, 173, -115, -116, 197, -79,
	77, -33, 75, -52, -35, 27, -69, 31, -2, -154,
	-103, -103, -83, -86, -103, -51, -103, -51, -51, 53,
	52, -124, -135, 170, 8, 56, 57, 57, -114, 25,
	-58, 107, -155, -155, -124, -124, -124, -133, -124, 141,
	-124, 141, -155, -155, -154, -28, 195, -33, -77, 12,
	8, -67, -2, 107, 52, 53, -155, 52, -155, -155,
	-147, -136, 122, 27, 121, 182, 53, 53, -154, 95,
	-128, 54, -58, -155, 56, -78, 13, 15, -88, -155,
	-103, -103, -103, -126, 63, 27, 27, -149, -150, 132,
	-27, 88, 200, -33, -66, 56, -155, 52, -103, -155,
	198, 46, 201, -150, 31, 36, 199, 202, 134, 36,
	135, 200, -154, 201, -58, 131, 202, -155, -155,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 399, 0, 175,
	175, 175, 175, 175, 0, 459, 441, 0, 0, 0,
	0, 0, 169, 623, 623, 623, 623, 623, 0, 28,
	29, 621, 1, 3, 407, 0, 0, 179, 182, 177,
	441, 0, 0, 0, 44, 0, 0, 614, 0, 439,
	460, 461, 464, 465, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 615, 616,
	617, 618, 619, 620, 0, 0, 442, 0, 437, 0,
	437, 0, 162, 243, 468, 469, 614, 0, 623, 164,
	165, 166, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	168, 170, 171, 172, 173, 174, 22, 411, 0, 0,
	399, 24, 0, 175, 180, 181, 185, 183, 184, 176,
	0, 0, 204, 206, 207, 208, 224, 0, 226, 0,
	0, 35, 0, 38, -2, 566, -2, 432, 0, 381,
	0, -2, -2, 0, 50, 0, 0, 624, 0, 0,
	0, 0, 624, 0, 0, 0, 0, 0, 161, 0,
	163, 167, 23, 622, 18, 0, 0, 408, 253, 0,
	258, 260, 0, 295, 296, 297, 298, 299, 0, 0,
	0, 0, 0, 0, 0, 322, 323, 324, 325, 384,
	385, 386, 387, 388, 389, 390, 391, 262, 263, 381,
	0, 431, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 346, 346, 346, 346, 346, 346, 346, 346, 0,
	0, 0, 0, 400, 401, 404, 407, 22, 182, 0,
	187, 186, 178, 0, 0, 242, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 234, 0, 0, 0, 0,
	225, 0, 22, 0, 245, 227, 0, 229, 230, 251,
	0, 0, 33, 34, 623, 42, 43, 466, 467, 0,
	40, 0, 0, 138, 0, 103, 99, 55, 56, 92,
	58, 92, 92, 92, 92, 116, 116, 116, 116, 84,
	85, 86, 87, 88, 0, 71, 92, 92, 92, 75,
	59, 60, 61, 62, 63, 64, 65, 94, 94, 94,
	96, 96, 462, 46, 625, 626, 0, 48, 0, 0,
	150, 0, 158, 438, 0, 624, 244, 470, 471, 412,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 281, 282, 283,
	284, 285, 286, 259, 0, 273, 0, 0, 0, 315,
	316, 317, 318, 319, 320, 0, 189, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 185, 0, 373, 0,
	338, 0, 339, 340, 341, 342, 343, 344, 345, 0,
	189, 0, 0, 0, 403, 405, 406, 411, 25, 185,
	0, 392, 0, 0, 0, 188, 424, 0, 0, -2,
	0, 241, 251, 205, 220, 222, 0, 217, 232, 233,
	235, 0, 237, 0, 239, 240, 209, 210, 292, 22,
	211, 0, 0, 0, 228, 399, 0, 251, 36, 37,
	433, 434, 382, 0, -2, 49, 139, 141, 144, 145,
	146, 51, 52, 0, 0, 0, 0, 133, 134, 106,
	104, 0, 101, 100, 57, 0, 116, 116, 78, 79,
	119, 0, 119, 119, 119, 0, 72, 73, 74, 66,
	0, 67, 68, 69, 0, 70, 0, 0, 624, 440,
	623, 454, 151, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 0, 157, 624, 160, 0, 254,
	255, 257, 274, 0, 276, 278, 409, 410, 264, 265,
	289, 290, 291, 0, 0, 0, 0, 287, 269, 0,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 314, 357, 358, 0, 312, 313, 321, 0,
	0, 190, 191, 193, 197, 0, 382, 0, 430, 0,
	0, 0, 0, 0, 0, 379, 376, 0, 0, 347,
	0, 0, 0, 0, 402, 19, 0, 435, 436, 393,
	394, 202, 26, 0, 424, 414, 426, 428, 0, 22,
	0, 420, 399, 214, 221, 0, 0, 215, 0, 216,
	236, 238, -2, 0, 0, 0, 407, 252, 32, 0,
	0, 142, 0, 0, 129, 0, 131, 132, 112, 0,
	105, 54, 102, 0, 119, 119, 80, 0, 0, 81,
	82, 83, 0, 90, 0, 0, 0, 463, 47, 147,
	0, 623, 455, 456, 457, 458, 0, 159, 413, 275,
	277, 279, 266, 287, 270, 0, 267, 0, 0, 261,
	326, 0, 0, 194, 198, 0, 200, 201, 0, 189,
	294, 329, 330, 0, 0, 0, 0, 399, 0, 377,
	0, 0, 337, 348, 349, 350, 351, 20, 251, 0,
	0, 27, 0, 429, -2, 0, 0, 0, 407, 218,
	0, 223, 0, 0, 0, 31, 383, 140, 143, 0,
	135, 92, 130, 114, 0, 107, 108, 109, 110, 111,
	93, 76, 77, 120, 117, 118, 89, 0, 0, 97,
	0, 624, 148, 149, 0, 268, 0, 288, 271, 327,
	192, 199, 195, 0, 0, 0, 92, 92, 362, 92,
	96, 365, 92, 367, 92, 370, 0, 0, 0, 374,
	336, 380, 0, 395, 203, 0, 427, 0, -2, 0,
	422, 421, 30, 0, 212, 0, 249, 0, 0, 128,
	0, 137, 121, 115, 0, 91, 0, 0, 45, 0,
	272, 0, 328, 331, 359, 116, 363, 364, 366, 368,
	369, 371, 333, 332, 0, 0, 0, 378, 397, 0,
	0, 417, 22, 0, 0, 219, 246, 0, 247, 248,
	136, 126, 0, 123, 125, 113, 95, 98, 0, 196,
	360, 361, 352, 335, 375, 21, 0, 0, 425, -2,
	423, 213, 250, 53, 0, 122, 124, 0, 153, 0,
	0, 0, 0, 398, 396, 127, 152, 0, 0, 334,
	0, 0, 0, 154, 0, 353, 0, 356, 0, 354,
	0, 0, 0, 0, 0, 0, 355, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	51, 53, 95, 93, 52, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 204,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:275
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:280
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:304
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:350
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:361
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:443
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:448
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:465
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:498
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:671
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:742
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:785
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:793
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:828
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:848
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:876
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:887
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:907
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:931
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:935
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:940
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:945
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:949
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:955
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:965
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:971
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:975
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:987
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:995
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1000
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1029
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
			setAllowComments(yylex, true)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.bytes2 = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = UnionStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = UnionAllStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = UnionDistinctStr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = SQLCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = DistinctStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = StraightJoinHint
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.selectExprs = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1292
		{
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.empty = struct{}{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.empty = struct{}{}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = JoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = JoinStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = JoinStr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = StraightJoinStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.str = LeftJoinStr
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.str = LeftJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.str = RightJoinStr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.str = RightJoinStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.str = NaturalJoinStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1371
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.indexHints = nil
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = IsNullStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = IsNotNullStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = IsTrueStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = IsNotTrueStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = IsFalseStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = IsNotFalseStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.str = EqualStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.str = LessThanStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = GreaterThanStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = LessEqualStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.str = GreaterEqualStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.str = NotEqualStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 334:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.str = BooleanModeStr
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = QueryExpansionStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = nil
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.str = string("")
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.expr = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &NullVal{}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.exprs = nil
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.orderBy = nil
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.str = AscScr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.str = AscScr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = DescScr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.limit = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.str = ForUpdateStr
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.str = ShareModeStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2183
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2196
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.updateExprs = nil
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.byt = 0
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.byt = 1
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.str = IgnoreStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			decNesting(yylex)
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2567
		{
			forceEOF(yylex)
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2572
		{
			forceEOF(yylex)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2576
		{
			forceEOF(yylex)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2580
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

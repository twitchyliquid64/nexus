Only in youtube/vitess/go/sqltypes/: arithmetic.go
Only in youtube/vitess/go/sqltypes/: arithmetic_test.go
diff -u youtube/vitess/go/sqltypes/bind_variables.go xwb1989/sqlparser/dependency/sqltypes/bind_variables.go
--- youtube/vitess/go/sqltypes/bind_variables.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/bind_variables.go	2017-09-17 10:15:28.000000000 -0700
@@ -19,11 +19,10 @@
 import (
 	"errors"
 	"fmt"
+	"reflect"
 	"strconv"
 
-	"github.com/golang/protobuf/proto"
-
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 // NullBindVariable is a bindvar with NULL value.
@@ -248,9 +247,8 @@
 }
 
 // BindVariablesEqual compares two maps of bind variables.
-// For protobuf messages we have to use "proto.Equal".
 func BindVariablesEqual(x, y map[string]*querypb.BindVariable) bool {
-	return proto.Equal(&querypb.BoundQuery{BindVariables: x}, &querypb.BoundQuery{BindVariables: y})
+	return reflect.DeepEqual(&querypb.BoundQuery{BindVariables: x}, &querypb.BoundQuery{BindVariables: y})
 }
 
 // CopyBindVariables returns a shallow-copy of the given bindVariables map.
diff -u youtube/vitess/go/sqltypes/bind_variables_test.go xwb1989/sqlparser/dependency/sqltypes/bind_variables_test.go
--- youtube/vitess/go/sqltypes/bind_variables_test.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/bind_variables_test.go	2017-09-17 10:15:28.000000000 -0700
@@ -21,16 +21,14 @@
 	"strings"
 	"testing"
 
-	"github.com/golang/protobuf/proto"
-
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 func TestProtoConversions(t *testing.T) {
 	v := TestValue(Int64, "1")
 	got := ValueToProto(v)
 	want := &querypb.Value{Type: Int64, Value: []byte("1")}
-	if !proto.Equal(got, want) {
+	if !reflect.DeepEqual(got, want) {
 		t.Errorf("ValueToProto: %v, want %v", got, want)
 	}
 	gotback := ProtoToValue(got)
@@ -240,7 +238,7 @@
 			t.Errorf("ToBindVar(%T(%v)) error: nil, want %s", tcase.in, tcase.in, tcase.err)
 			continue
 		}
-		if !proto.Equal(bv, tcase.out) {
+		if !reflect.DeepEqual(bv, tcase.out) {
 			t.Errorf("ToBindVar(%T(%v)): %v, want %s", tcase.in, tcase.in, bv, tcase.out)
 		}
 	}
Only in youtube/vitess/go/sqltypes/: event_token.go
Only in youtube/vitess/go/sqltypes/: event_token_test.go
diff -u youtube/vitess/go/sqltypes/plan_value.go xwb1989/sqlparser/dependency/sqltypes/plan_value.go
--- youtube/vitess/go/sqltypes/plan_value.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/plan_value.go	2017-09-17 10:15:28.000000000 -0700
@@ -18,10 +18,10 @@
 
 import (
 	"encoding/json"
+	"errors"
+	"fmt"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
-	vtrpcpb "github.com/youtube/vitess/go/vt/proto/vtrpc"
-	"github.com/youtube/vitess/go/vt/vterrors"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 // PlanValue represents a value or a list of values for
@@ -87,7 +87,7 @@
 	case pv.ListKey != "" || pv.Values != nil:
 		// This code is unreachable because the parser does not allow
 		// multi-value constructs where a single value is expected.
-		return NULL, vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "a list was supplied where a single value was expected")
+		return NULL, errors.New("a list was supplied where a single value was expected")
 	}
 	return NULL, nil
 }
@@ -95,10 +95,10 @@
 func (pv PlanValue) lookupValue(bindVars map[string]*querypb.BindVariable) (*querypb.BindVariable, error) {
 	bv, ok := bindVars[pv.Key]
 	if !ok {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "missing bind var %s", pv.Key)
+		return nil, fmt.Errorf("missing bind var %s", pv.Key)
 	}
 	if bv.Type == querypb.Type_TUPLE {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "TUPLE was supplied for single value bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("TUPLE was supplied for single value bind var %s", pv.ListKey)
 	}
 	return bv, nil
 }
@@ -129,16 +129,16 @@
 	}
 	// This code is unreachable because the parser does not allow
 	// single value constructs where multiple values are expected.
-	return nil, vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "a single value was supplied where a list was expected")
+	return nil, errors.New("a single value was supplied where a list was expected")
 }
 
 func (pv PlanValue) lookupList(bindVars map[string]*querypb.BindVariable) (*querypb.BindVariable, error) {
 	bv, ok := bindVars[pv.ListKey]
 	if !ok {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "missing bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("missing bind var %s", pv.ListKey)
 	}
 	if bv.Type != querypb.Type_TUPLE {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "single value was supplied for TUPLE bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("single value was supplied for TUPLE bind var %s", pv.ListKey)
 	}
 	return bv, nil
 }
@@ -171,7 +171,7 @@
 		case l:
 			return nil
 		default:
-			return vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "mismatch in number of column values")
+			return errors.New("mismatch in number of column values")
 		}
 	}
 
diff -u youtube/vitess/go/sqltypes/plan_value_test.go xwb1989/sqlparser/dependency/sqltypes/plan_value_test.go
--- youtube/vitess/go/sqltypes/plan_value_test.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/plan_value_test.go	2017-09-17 10:15:28.000000000 -0700
@@ -21,7 +21,7 @@
 	"strings"
 	"testing"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 func TestPlanValueIsNull(t *testing.T) {
Only in youtube/vitess/go/sqltypes/: proto3.go
Only in youtube/vitess/go/sqltypes/: proto3_test.go
Only in youtube/vitess/go/sqltypes/: query_response.go
Only in youtube/vitess/go/sqltypes/: result.go
Only in youtube/vitess/go/sqltypes/: result_test.go
diff -u youtube/vitess/go/sqltypes/testing.go xwb1989/sqlparser/dependency/sqltypes/testing.go
--- youtube/vitess/go/sqltypes/testing.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/testing.go	2017-09-17 10:15:28.000000000 -0700
@@ -17,17 +17,14 @@
 package sqltypes
 
 import (
-	"bytes"
-	"fmt"
-	"strings"
-
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	querypb "github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 // Functions in this file should only be used for testing.
 // This is an experiment to see if test code bloat can be
 // reduced and readability improved.
 
+/*
 // MakeTestFields builds a []*querypb.Field for testing.
 //   fields := sqltypes.MakeTestFields(
 //     "a|b",
@@ -105,6 +102,7 @@
 	}
 	return results
 }
+*/
 
 // TestBindVariable makes a *querypb.BindVariable from
 // an interface{}.It panics on invalid input.
@@ -126,6 +124,7 @@
 	return MakeTrusted(typ, []byte(val))
 }
 
+/*
 // PrintResults prints []*Results into a string.
 // This function should only be used for testing.
 func PrintResults(results []*Result) string {
@@ -147,3 +146,4 @@
 	}
 	return splits
 }
+*/
diff -u youtube/vitess/go/sqltypes/type.go xwb1989/sqlparser/dependency/sqltypes/type.go
--- youtube/vitess/go/sqltypes/type.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/type.go	2017-09-17 10:15:28.000000000 -0700
@@ -19,7 +19,7 @@
 import (
 	"fmt"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 // This file provides wrappers and support
diff -u youtube/vitess/go/sqltypes/type_test.go xwb1989/sqlparser/dependency/sqltypes/type_test.go
--- youtube/vitess/go/sqltypes/type_test.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/type_test.go	2017-09-17 10:15:28.000000000 -0700
@@ -19,7 +19,7 @@
 import (
 	"testing"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 func TestTypeValues(t *testing.T) {
diff -u youtube/vitess/go/sqltypes/value.go xwb1989/sqlparser/dependency/sqltypes/value.go
--- youtube/vitess/go/sqltypes/value.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/value.go	2017-09-17 10:15:28.000000000 -0700
@@ -23,10 +23,10 @@
 	"fmt"
 	"strconv"
 
-	"github.com/youtube/vitess/go/bytes2"
-	"github.com/youtube/vitess/go/hack"
+	"github.com/xwb1989/sqlparser/dependency/bytes2"
+	"github.com/xwb1989/sqlparser/dependency/hack"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 var (
diff -u youtube/vitess/go/sqltypes/value_test.go xwb1989/sqlparser/dependency/sqltypes/value_test.go
--- youtube/vitess/go/sqltypes/value_test.go	2017-09-16 21:27:21.000000000 -0700
+++ xwb1989/sqlparser/dependency/sqltypes/value_test.go	2017-09-17 10:15:28.000000000 -0700
@@ -22,7 +22,7 @@
 	"strings"
 	"testing"
 
-	querypb "github.com/youtube/vitess/go/vt/proto/query"
+	"github.com/xwb1989/sqlparser/dependency/querypb"
 )
 
 const (
